openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:9080/api/v1
    description: Environnement de test Docker
  - url: http://localhost:9090/api/v1
    description: Environnement de test local
components:
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://localhost:8080/auth/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://localhost:8080/auth/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    Profile:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        lastname:
          type: string
        firstname:
          type: string
        address:
          type: string
        email:
          type: string
        age:
          type: integer
          format: int32
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
    Profiles:
      type: array
      items:
        $ref: "#/components/schemas/Profile"

security: 
  - oAuthSample: 
    - profile
    - email
paths:
  /profiles/current:
    get:
      summary: Retourne le profile courant de l'utilisateur
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  name:
                    type: string
  /matchs/localisation:
    post:
      summary: Modifie la localisation d'un profil unique retrouvé à partir de son email
      tags:
        - matchs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  description: L'email de l'user qui veut modifier sa localisation
                  type: string
                name:
                  description: Nom du profil de l'utilisateur
                  type: string
                address:
                  description: Id de l'adresse existante
                  type: integer
              required:
                - email
      responses:
        '200':
          description: Profile Localisation updated.
          content:
            'application/json': { }
          '405':
            description: Method Not Allowed
            content:
              'application/json': { }

  /matchs/findByDistance:
    parameters:
      - name: long
        in: query
        required: true
        description: La longitude des profils qu'on veut retrouver
        schema:
          type: integer
      - name: lat
          in: query
          required: true
          description: La latitude des profils qu'on veut retrouver
          schema:
            type: integer
      - name: distance
          in: query
          required: true
          description: La distance des profils qu'on veut retrouver
          schema:
            type: integer
    get:
      description: Get all profiles match with query parameters
        tags:
          - matchs
        operationId: findByDistance
        responses:
          '200':
            description: the profile's match
            headers:
              x-next:
                description: A link to the next page of responses
                schema:
                  type: string
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Profiles"